#!/bin/bash
set -e;

DOCKER_IMAGE=blag/postgresql

# Check if name is specified
if [[ $1 == postgresql:* ]]; then
    if [ -z $2 ] && [ $1 != postgresql:list ]; then
        echo "You must specify an app name"
        exit 1
    else
        APP="$2"
        # Check if app exists with the same name
        if [[ -d "$DOKKU_ROOT/$APP" ]]; then
            APP_EXISTS=true
        else
            APP_EXISTS=false
        fi
    fi
fi

# Create $APP/postgresql directory if not exists
if [[ ! -d $DOKKU_ROOT/$APP/postgresql ]]; then
    mkdir -p $DOKKU_ROOT/$APP/postgresql
    chown -R dokku: $DOKKU_ROOT/$APP/postgresql
fi

function check_postgresql_container() {
    if [[ ! -f "$DOKKU_ROOT/$APP/postgresql" ]]; then
        echo "Unknown (or too old) PostgreSQL container"
        exit 1
    fi
}

function check_postgresql_tool() {
    local tool_name="$1"
    if [[ $(whereis $tool_name | awk '{ print NF }') -eq 1 ]]; then
        echo "'${tool_name}' not found. Is the package 'postgresql-client' installed?" 1>&2
        exit 1
    fi
}

case "$1" in

  postgresql:create)
    DB_IMAGE=postgresql/$APP
    # Check if DB container is installed
    IMAGE=$(docker images | grep "$DOCKER_IMAGE " |  awk '{ print $3 }')
    if [[ -z $IMAGE ]]; then
        echo "PostgreSQL image not found... Did you run 'dokku plugins-install' ?"
        exit 1
    fi
    # Check if an existing DB volume exists
    if [[ -f "$DOKKU_ROOT/$APP/postgresql/volumes/data" ]]; then
        DATA_VOLUME="$DOKKU_ROOT/$APP/postgresql/volumes/data:/var/lib/postgresql"
        CONFIG_VOLUME="$DOKKU_ROOT/$APP/postgresql/volumes/log:/etc/postgresql/9.3"
        LOG_VOLUME="$DOKKU_ROOT/$APP/postgresql/volumes/config:/var/log/postgresql/9.3"
        DB_PASSWORD=$(cat $DOKKU_ROOT/$APP/postgresql/PASSWORD)
        DB_PORT=$(cat $DOKKU_ROOT/$APP/postgresql/PORT)
        echo
        echo "-----> Reusing postgresql/$APP database"
    else
        mkdir -p "$DOKKU_ROOT/$APP/postgresql/volumes/data"
        mkdir -p "$DOKKU_ROOT/$APP/postgresql/volumes/log"
        mkdir -p "$DOKKU_ROOT/$APP/postgresql/volumes/config"
        DB_PASSWORD=$(echo $(date)$(< /dev/urandom tr -dc A-Za-z0-9 | head -c 16)"$APP" | md5sum | awk '{ print $1 }')
        echo $DB_PASSWORD > "$DOKKU_ROOT/$APP/postgresql/PASSWORD"
        chown dokku: "$DOKKU_ROOT/$APP/postgresql/PASSWORD"
        chmod 700 "$DOKKU_ROOT/$APP/postgresql/PASSWORD"
    fi
    # Fork DB image
    ID=$(docker run -d $DOCKER_IMAGE exit 0)
    docker wait $ID > /dev/null
    IMAGE=$(docker commit $ID)
    docker tag $IMAGE $DB_IMAGE

    # Launch container
    ID=$(docker run -v $DATA_VOLUME -v $CONFIG_VOLUME -v $LOG_VOLUME -p 5432 -d $DB_IMAGE /run.sh $DB_PASSWORD)
    sleep 4

    # Write port for further usage
    PORT=$(docker port $ID 5432 | sed 's/0.0.0.0://')
    echo $PORT > "$DOKKU_ROOT/$APP/postgresql/PORT"
    # Link to a potential existing app
    dokku postgresql:link $APP $APP
    echo
    echo "-----> PostgreSQL container created: $DB_IMAGE"
    sleep 1
    dokku postgresql:info $APP
    ;;

  postgresql:delete)
    DB_IMAGE=postgresql/$APP
    ID=$(docker ps -a | grep "$DB_IMAGE":latest |  awk '{print $1}')
    # Stop and remove the container
    if [[ ! -z $ID ]]; then
        docker kill $ID > /dev/null
        sleep 1
        docker rm -v $ID > /dev/null
        sleep 1
    fi
    # Remove image
    IMAGE=$(docker images | grep "$DB_IMAGE " |  awk '{print $1}')
    if [[ ! -z $IMAGE ]]; then
        docker rmi $IMAGE > /dev/null
    fi
    # Remove container port storage
    if [[ -f "$DOKKU_ROOT/$APP/postgresql/PORT" ]]; then
        rm -f "$DOKKU_ROOT/$APP/postgresql/PORT"
    fi
    # Remove container root password
    if [[ -f "$DOKKU_ROOT/$APP/postgresql/PASSWORD" ]]; then
        rm -f "$DOKKU_ROOT/$APP/postgresql/PASSWORD"
    fi
    # Remove persistent volume
    if [[ -d "$DOKKU_ROOT/$APP/postgresql/volumes" ]]; then
        rm -rf "$DOKKU_ROOT/$APP/postgresql/volumes"
    fi
    echo
    echo "-----> PostgreSQL container deleted: $DB_IMAGE"
    ;;

  postgresql:dump)
    check_postgresql_container
    check_postgresql_tool pg_dump
    export PGPASSWORD=$(cat "$DOKKU_ROOT/$APP/postgresql/PASSWORD")
    PORT=$(cat "$DOKKU_ROOT/$APP/postgresql/PORT")

    pg_dump -h 172.17.42.1 -p $PORT -U root -c -O db

    # echo to stderr, as stdout will probably be redirected to a file
    echo 1>&2
    echo "-----> $APP database dumped" 1>&2
    ;;

  postgresql:info)
    check_postgresql_container
    DB_PASSWORD=$(cat "$DOKKU_ROOT/$APP/postgresql/PASSWORD")
    PORT=$(cat "$DOKKU_ROOT/$APP/postgresql/PORT")

    echo
    echo "       Host: 172.17.42.1"
    echo "       Port: $PORT"
    echo "       User: 'root'"
    echo "       Password: '$DB_PASSWORD'"
    echo "       Database: 'db'"
    echo
    echo "       Url: 'postgres://root:$DB_PASSWORD@172.17.42.1:$PORT/db'"
    echo
    ;;

  postgresql:link)
    if $APP_EXISTS; then
        # Check argument
        if [[ -z $3 ]]; then
            echo "You must specify a database name"
            exit 1
        fi
        DB_IMAGE="postgresql/$3"
        if [[ ! -f "$DOKKU_ROOT/$APP/postgresql/PASSWORD" ]]; then
            echo "Database is not initialized correctly"
            exit 1
        fi
        DB_PASSWORD=$(cat "$DOKKU_ROOT/$APP/postgresql/PASSWORD")
        PORT=$(cat "$DOKKU_ROOT/$APP/postgresql/PORT")
        # Link database using dokku command
        dokku config:set $APP "DATABASE_URL=postgres://root:$DB_PASSWORD@172.17.42.1:$PORT/db"
        echo
        echo "-----> $APP linked to $DB_IMAGE database"
    fi
    ;;

  postgresql:logs)
    DB_IMAGE=postgresql/$APP
    ID=$(docker ps -a | grep "$DB_IMAGE" |  awk '{print $1}')
    docker logs $ID | tail -n 100
    ;;

  postgresql:list)
    CONTAINERS=$(ls -d $DOKKU_ROOT/*/postgresql/volumes 2>/dev/null | sed "s|^$DOKKU_ROOT/\(.*\)/postgresql/volumes$|\1|")
    if [[ -z $CONTAINERS ]]; then
        echo "There are no PostgreSQL containers created."
    else
        echo "PostgreSQL containers:"
        for CONTAINER in $CONTAINERS; do
            echo "  - $CONTAINER"
        done
    fi

    # Check for old containers
    CONTAINERS=$(ls -d $DOKKU_ROOT/.postgresql/volume_* 2>/dev/null | sed "s|^$DOKKU_ROOT/.postgresql/volume_\(.*\)$|\1|")
    echo "There are some old PostgreSQL containers:"
    for CONTAINER in $CONTAINERS; do
        echo "  - [old] $CONTAINER"
    done
    ;;

  postgresql:restore)
    check_postgresql_container
    check_postgresql_tool psql
    export PGPASSWORD=$(cat "$DOKKU_ROOT/$APP/postgresql/PASSWORD")
    PORT=$(cat "$DOKKU_ROOT/$APP/postgresql/PORT")

    psql -h 172.17.42.1 -p $PORT -U root db

    echo
    echo "-----> $APP database restored"
    ;;

  help)
    cat && cat<<EOF
    postgresql:create <db>                         Create a PostgreSQL container
    postgresql:delete <db>                         Delete specified PostgreSQL container
    postgresql:dump <db> > dump_file.sql           Dump database data
    postgresql:info <db>                           Display database informations
    postgresql:link <app> <db>                     Link an app to a PostgreSQL database
    postgresql:list                                Display list of PostgreSQL containers
    postgresql:logs <db>                           Display last logs from PostgreSQL container
    postgresql:restore <db> < dump_file.sql        Restore database data from a previous dump
EOF
    ;;

esac
